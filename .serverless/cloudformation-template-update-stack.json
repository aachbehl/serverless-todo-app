{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "CreateTodoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/my-todo-app-dev-createTodo"
      }
    },
    "GetTodosLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/my-todo-app-dev-getTodos"
      }
    },
    "UpdateTodoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/my-todo-app-dev-updateTodo"
      }
    },
    "DeleteTodoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/my-todo-app-dev-deleteTodo"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "my-todo-app",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-todo-app-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-todo-app-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "my-todo-app",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "CreateTodoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-8a69a235-5b66",
          "S3Key": "serverless/my-todo-app/dev/1744535457092-2025-04-13T09:10:57.092Z/my-todo-app.zip"
        },
        "Handler": "createTodo.createTodo",
        "Runtime": "nodejs18.x",
        "FunctionName": "my-todo-app-dev-createTodo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "todo-db.cmhuk6qq6f7c.us-east-1.rds.amazonaws.com",
            "DB_USER": "admin_1234",
            "DB_PASSWORD": "admin_1234",
            "DB_NAME": "postgres"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0c2224406d33221e0"
          ],
          "SubnetIds": [
            "subnet-03cb24a23e6801e9f",
            "subnet-0e3fb7d94151376e2",
            "subnet-0bf65ae8d24011ae2",
            "subnet-05d1bab4216a2dccf",
            "subnet-0c84c89ccf31e64d4",
            "subnet-0a2e0008338f37ed6"
          ]
        }
      },
      "DependsOn": [
        "CreateTodoLogGroup"
      ]
    },
    "GetTodosLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-8a69a235-5b66",
          "S3Key": "serverless/my-todo-app/dev/1744535457092-2025-04-13T09:10:57.092Z/my-todo-app.zip"
        },
        "Handler": "getTodos.getTodos",
        "Runtime": "nodejs18.x",
        "FunctionName": "my-todo-app-dev-getTodos",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "todo-db.cmhuk6qq6f7c.us-east-1.rds.amazonaws.com",
            "DB_USER": "admin_1234",
            "DB_PASSWORD": "admin_1234",
            "DB_NAME": "postgres"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0c2224406d33221e0"
          ],
          "SubnetIds": [
            "subnet-03cb24a23e6801e9f",
            "subnet-0e3fb7d94151376e2",
            "subnet-0bf65ae8d24011ae2",
            "subnet-05d1bab4216a2dccf",
            "subnet-0c84c89ccf31e64d4",
            "subnet-0a2e0008338f37ed6"
          ]
        }
      },
      "DependsOn": [
        "GetTodosLogGroup"
      ]
    },
    "UpdateTodoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-8a69a235-5b66",
          "S3Key": "serverless/my-todo-app/dev/1744535457092-2025-04-13T09:10:57.092Z/my-todo-app.zip"
        },
        "Handler": "updateTodo.updateTodo",
        "Runtime": "nodejs18.x",
        "FunctionName": "my-todo-app-dev-updateTodo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "todo-db.cmhuk6qq6f7c.us-east-1.rds.amazonaws.com",
            "DB_USER": "admin_1234",
            "DB_PASSWORD": "admin_1234",
            "DB_NAME": "postgres"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0c2224406d33221e0"
          ],
          "SubnetIds": [
            "subnet-03cb24a23e6801e9f",
            "subnet-0e3fb7d94151376e2",
            "subnet-0bf65ae8d24011ae2",
            "subnet-05d1bab4216a2dccf",
            "subnet-0c84c89ccf31e64d4",
            "subnet-0a2e0008338f37ed6"
          ]
        }
      },
      "DependsOn": [
        "UpdateTodoLogGroup"
      ]
    },
    "DeleteTodoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-8a69a235-5b66",
          "S3Key": "serverless/my-todo-app/dev/1744535457092-2025-04-13T09:10:57.092Z/my-todo-app.zip"
        },
        "Handler": "deleteTodo.deleteTodo",
        "Runtime": "nodejs18.x",
        "FunctionName": "my-todo-app-dev-deleteTodo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "todo-db.cmhuk6qq6f7c.us-east-1.rds.amazonaws.com",
            "DB_USER": "admin_1234",
            "DB_PASSWORD": "admin_1234",
            "DB_NAME": "postgres"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0c2224406d33221e0"
          ],
          "SubnetIds": [
            "subnet-03cb24a23e6801e9f",
            "subnet-0e3fb7d94151376e2",
            "subnet-0bf65ae8d24011ae2",
            "subnet-05d1bab4216a2dccf",
            "subnet-0c84c89ccf31e64d4",
            "subnet-0a2e0008338f37ed6"
          ]
        }
      },
      "DependsOn": [
        "DeleteTodoLogGroup"
      ]
    },
    "CreateTodoLambdaVersionka97FaFNTR3gwMfU3EsCqusKSOh194SfxhamGXO4O8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateTodoLambdaFunction"
        },
        "CodeSha256": "hVo9r6HbwMCs92pXlcqnpfr0NEWt7UWXKGt34vxnABw="
      }
    },
    "GetTodosLambdaVersionvTCbV6b83Sd3dMA4lvFDuv2ZRyStVxFu3yyPwLZL7HY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTodosLambdaFunction"
        },
        "CodeSha256": "hVo9r6HbwMCs92pXlcqnpfr0NEWt7UWXKGt34vxnABw="
      }
    },
    "UpdateTodoLambdaVersionQjuMDRYDjIZAC6vfZfRI3how26vzwgxHbGxKI4nTi8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateTodoLambdaFunction"
        },
        "CodeSha256": "hVo9r6HbwMCs92pXlcqnpfr0NEWt7UWXKGt34vxnABw="
      }
    },
    "DeleteTodoLambdaVersionSkM7WWwIO4btZdu2Jsi8puKU4h0wQiGm43SW0qO4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteTodoLambdaFunction"
        },
        "CodeSha256": "hVo9r6HbwMCs92pXlcqnpfr0NEWt7UWXKGt34vxnABw="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-my-todo-app",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceTodos": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "todos",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTodosOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodos"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTodosPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodos"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateTodoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateTodoLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodTodosGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodos"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetTodosLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetTodosLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodTodosPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodos"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateTodoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateTodoLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodTodosDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodos"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteTodoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeleteTodoLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1744535436764": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodTodosOptions",
        "ApiGatewayMethodTodosPost",
        "ApiGatewayMethodTodosGet",
        "ApiGatewayMethodTodosPut",
        "ApiGatewayMethodTodosDelete"
      ]
    },
    "CreateTodoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateTodoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetTodosLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTodosLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateTodoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateTodoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteTodoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteTodoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-1-8a69a235-5b66",
      "Export": {
        "Name": "sls-my-todo-app-dev-ServerlessDeploymentBucketName"
      }
    },
    "CreateTodoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateTodoLambdaVersionka97FaFNTR3gwMfU3EsCqusKSOh194SfxhamGXO4O8"
      },
      "Export": {
        "Name": "sls-my-todo-app-dev-CreateTodoLambdaFunctionQualifiedArn"
      }
    },
    "GetTodosLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTodosLambdaVersionvTCbV6b83Sd3dMA4lvFDuv2ZRyStVxFu3yyPwLZL7HY"
      },
      "Export": {
        "Name": "sls-my-todo-app-dev-GetTodosLambdaFunctionQualifiedArn"
      }
    },
    "UpdateTodoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateTodoLambdaVersionQjuMDRYDjIZAC6vfZfRI3how26vzwgxHbGxKI4nTi8"
      },
      "Export": {
        "Name": "sls-my-todo-app-dev-UpdateTodoLambdaFunctionQualifiedArn"
      }
    },
    "DeleteTodoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteTodoLambdaVersionSkM7WWwIO4btZdu2Jsi8puKU4h0wQiGm43SW0qO4"
      },
      "Export": {
        "Name": "sls-my-todo-app-dev-DeleteTodoLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-my-todo-app-dev-ServiceEndpoint"
      }
    }
  }
}